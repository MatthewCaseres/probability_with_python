Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/nbclient/client.py", line 1117, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/nbclient/util.py", line 78, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/nbclient/util.py", line 57, in just_run
    return loop.run_until_complete(coro)
  File "/opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/asyncio/base_events.py", line 616, in run_until_complete
    return future.result()
  File "/opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/nbclient/client.py", line 558, in async_execute
    await self.async_execute_cell(
  File "/opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/nbclient/client.py", line 862, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/nbclient/client.py", line 765, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import itertools

# We can use the itertools.permutations() function from the Python standard library
permutationsGenerator = itertools.permutations([1,2,3])

# The return type of itertools.permutations() is a generator. 
# Python will not store all the values in memory, but instead will generate them one at a time.
print(f"The return type of itertools.permutations is {type(permutationsGenerator)}")

# You can use next() to get the next permutation.
print(f"Permutation 1 is {next(permutationsGenerator)}")
print(f"Permutation 2 is {next(permutationsGenerator)}")

# We can convert the generator to a list and print them.
permutations = list(permutationsGenerator)
print(f"The permutations of [1,2,3] are: \n {permutations}")

# We can write our own function too.
def generatePermutations(nums: list[int]) -> list[list[int]]:
  if len(nums) == 0:
    return [[]]
  else:
    permutations = []
    for i in range(len(nums)):
      permutations += [[nums[i]] + p for p in generatePermutations(nums[:i] + nums[i+1:])]
    return permutations
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mTypeError[0m                                 Traceback (most recent call last)
[0;32m/tmp/ipykernel_1630/223144171.py[0m in [0;36m<module>[0;34m[0m
[1;32m     17[0m [0;34m[0m[0m
[1;32m     18[0m [0;31m# We can write our own function too.[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 19[0;31m [0;32mdef[0m [0mgeneratePermutations[0m[0;34m([0m[0mnums[0m[0;34m:[0m [0mlist[0m[0;34m[[0m[0mint[0m[0;34m][0m[0;34m)[0m [0;34m->[0m [0mlist[0m[0;34m[[0m[0mlist[0m[0;34m[[0m[0mint[0m[0;34m][0m[0;34m][0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     20[0m   [0;32mif[0m [0mlen[0m[0;34m([0m[0mnums[0m[0;34m)[0m [0;34m==[0m [0;36m0[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m     21[0m     [0;32mreturn[0m [0;34m[[0m[0;34m[[0m[0;34m][0m[0;34m][0m[0;34m[0m[0;34m[0m[0m

[0;31mTypeError[0m: 'type' object is not subscriptable
TypeError: 'type' object is not subscriptable

